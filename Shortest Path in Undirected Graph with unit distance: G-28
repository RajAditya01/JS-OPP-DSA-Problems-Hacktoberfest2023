class Solution {
  shortestPath(edges, N, M, src) {
    // Create an adjacency list of size N for storing the undirected graph.
    const adj = new Array(N).fill([]); 

    for (const it of edges) {
      adj[it[0]].push(it[1]);
      adj[it[1]].push(it[0]);
    }

    // A dist array of size N initialized with a large number to 
    // indicate that initially all the nodes are untraversed.
    const dist = new Array(N).fill(Number.MAX_SAFE_INTEGER);

    // BFS Implementation.
    dist[src] = 0; 
    const q = [src]; 

    while (q.length > 0) {
      const node = q.shift(); 

      for (const it of adj[node]) {
        if (dist[node] + 1 < dist[it]) {
          dist[it] = 1 + dist[node];
          q.push(it);
        }
      }
    }

    // Updated shortest distances are stored in the resultant array 'ans'.
    // Unreachable nodes are marked as -1. 
    const ans = dist.map(d => d !== Number.MAX_SAFE_INTEGER ? d : -1);
    return ans; 
  }
}

const N = 9;
const M = 10;
const edges = [[0, 1], [0, 3], [3, 4], [4, 5], [5, 6], [1, 2], [2, 6], [6, 7], [7, 8], [6, 8]];

const obj = new Solution();
const ans = obj.shortestPath(edges, N, M, 0);

for (let i = 0; i < ans.length; i++) {
  console.log(ans[i] + " ");
}
